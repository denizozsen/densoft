TO DO

- Remove PageRegion constants concept and make it possible to add any
  arbitrarily named variables to the system_web_Page, which are then accessible
  to the main template as $this->[variable_name].
- Redirect to correct URL, if URL misses a trailing slash (before query string)
- Redirect to correct URL, if URL's capitalisation is inconsistent with handler
  file.
- Create a standard controller ('standard' meaning part of the framework) for
  the site logo
- Run default handler when request path maps to a directory, rather than a
  file (similarly to how '/' causes handlers_Default to be used). E.g.:
  '/admin/' would use class handlers_admin_Default, assuming that no
  handlers_Admin class exists.
- Create mechanism for each controller to add all of its possible parameters,
  to provice an API for getting/setting params easily
  -> use RequestParameters class
- Create mechanism for each controller to make certain params 'sticky'
  -> use RequestParameters class
- Split Configuration into:
  1) SiteConfiguration     (site settings, e.g. include path and timezone)
  2) DatabaseConfiguration (db connection settings)
  3) ServiceConfiguration  (interface for service location, aka IoC)
  -> Each can be overridden in a top-level folder
  -> SiteConfiguration should have a siteMode() method that allows finding
     out whether the site is currently running on LOCAL, TEST, LIVE, etc.
  -> DatabaseConfiguration can have sub-classes LiveDbConfig, LocalDbConfig, etc
  -> Think about all this a bit more...

- Create class Response
- Create class CachedRepository
  -> two choices as cache: 1) request-level cache (context) 2) real cache (memcache)


DONE
- Rename application.php (in root directory) and add a directory named 'app',
  which will be used by for application-specific classes.
  Note 1: the modules folder is different - it's used for modules that can be
          reused by several different application, and therefore can simply be
          dropped into any application and should just work.
  Note 2: We could add another class autoloader that will load classes within
          the app directory, without the need to use the 'app_' prefix in the
          class names.
- Make a View class that can be assigned view variables, which are then used
  by the view/template to render (i.e. echo) variable content
- Create page regions (in system_web_PageRegion) for site logo, breadcrumbs and
  main heading
- Run bootstrap.php in handler directory, in addition to running main bootstrap.php
- Move service instantiation (e.g. Database, MasterRepository, Router, Request)
  out of Configuration and into the respective Services class
  (system_core_Services or web_Services). Instantiate the Services classes from
  within the bootstrapper code to allow for different Services implementations
  (e.g. for mocking in unit tests).
- Make default error pages work (e.g. for invalid image paths)
- Create PageRequestHandler
- Create RequestHandler
- Create TaskRepository
- Create MasterRepository (instead of EntityLocator)
