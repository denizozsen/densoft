TO DO

- Change how Configuration works:
  -> make each configuration setting a method, e.g. handlersPrefix(),
     defaultHandlerPath() or siteName()
     -> This way each setting can be overridden by a Configuration sub-class
- Make Configuration overridable:
  -> Each top-level folder ('sub-application') can have its own Configiuration sub-class
  -> Each Configuration sub-class (in a top-level folder) can choose its own
     base class (e.g. Configuration vs LiveConfiguration)
- Split Configuration into:
  1) SiteConfiguration     (site settings, e.g. include path and timezone)
  2) DatabaseConfiguration (db connection settings)
  3) ServiceConfiguration  (interface for service location, aka IoC)
  -> Each can be overridden in a top-level folder
  -> SiteConfiguration should have a siteMode() method that allows finding
     out whether the site is currently running on LOCAL, TEST, LIVE, etc.
  -> DatabaseConfiguration can have sub-classes LiveDbConfig, LocalDbConfig, etc
- Move service instantiation (e.g. Database, MasterRepository, Router, Request)
  out of Configuration and into the respective Services class
  (system_core_Services or web_Services). Instantiate the Services classes from
  within the bootstrapper code to allow for different Services implementations
  (e.g. for mocking in unit tests).

- Create Response
- Create CachedRepository
  -> two choices as cache: 1) request-level cache (context) 2) real cache (memcache)


DONE
- Make default error pages work (e.g. for invalid image paths)
- Create PageRequestHandler
- Create RequestHandler
- Create TaskRepository
- Create MasterRepository (instead of EntityLocator)
